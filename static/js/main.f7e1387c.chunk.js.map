{"version":3,"sources":["components/button/button.js","components/presentation/presentation.js","components/codeSample/codeSample.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","label","pageUrl","buttonLayout","cssClass","layout","type","className","onClick","window","open","presentation","labelTop","labelMid","labelBottom","children","CodeSample","sample","App","src","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSA+BeA,MA5Bf,SAAgBC,GAAQ,IAElBC,EAICD,EAJDC,MACAC,EAGCF,EAHDE,QACAC,EAECH,EAFDG,aAJiB,EAMhBH,EADDI,gBALiB,MAKN,GALM,EAQhBC,EAAS,GAEb,OAAQF,GACL,IAAK,cACFE,EAAS,0BACT,MACH,QACGA,EAAS,gBAIf,OACG,4BACGC,KAAK,SACLC,UAAS,UAAKF,EAAL,YAAeD,GACxBI,QAAU,WAAQN,EAAUO,OAAOC,KAAKR,GAAWO,OAAOC,KAAK,iDAChET,I,MCLOU,MAnBf,SAAsBX,GAAQ,IAExBY,EAICZ,EAJDY,SACAC,EAGCb,EAHDa,SACAC,EAECd,EAFDc,YACAC,EACCf,EADDe,SAGH,OACG,yBAAKR,UAAU,aACZ,yBAAKA,UAAU,cAAcK,GAC7B,yBAAKL,UAAU,QAAQM,GACvB,0BAAMN,UAAU,YAChB,yBAAKA,UAAU,cAAcO,GAC5BC,I,MCJKC,MAVf,SAAoBhB,GAAQ,IAEtBiB,EACCjB,EADDiB,OAGH,OACG,yBAAKV,UAAU,YAAf,IAA4BU,EAA5B,MC+DSC,MAlEf,WAkBE,OACE,yBAAKX,UAAU,kBACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAYU,OAnBN,2LAqBR,yBAAKV,UAAU,cACb,yBAAKA,UAAU,kBACb,yBAAKY,IAAI,eAAeC,IAAI,qBAK9B,kBAAC,EAAD,CACER,SAAS,SACTC,SAAS,qBACTC,YAAY,wBAEZ,kBAAC,EAAD,CACEb,MAAM,UACNC,QAAS,iDAIb,yBAAKK,UAAU,wBACb,kBAAC,EAAD,CACEN,MAAM,KACNE,aAAa,cACbC,SAAS,eACTF,QAAS,gDAEX,kBAAC,EAAD,CACED,MAAM,MACNE,aAAa,cACbC,SAAS,aACTF,QAAS,kCAEX,kBAAC,EAAD,CACED,MAAM,MACNE,aAAa,cACbC,SAAS,UACTF,QAAS,kCCpDDmB,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f7e1387c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './button.css';\r\n\r\nfunction Button(props) {\r\n   const {\r\n      label,\r\n      pageUrl,\r\n      buttonLayout,\r\n      cssClass = \"\",\r\n   } = props;\r\n\r\n   let layout = \"\";\r\n\r\n   switch (buttonLayout) {\r\n      case \"socialMedia\":\r\n         layout = \"socialMediaSquareButton\";\r\n         break;\r\n      default:\r\n         layout = \"primaryButton\";\r\n         break;\r\n   }\r\n\r\n   return (\r\n      <button\r\n         type=\"button\"\r\n         className={`${layout} ${cssClass}`}\r\n         onClick={ () => { pageUrl ? window.open(pageUrl) : window.open('https://www.linkedin.com/in/gustavotenorio/') }}\r\n      >{label}</button>\r\n   );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport './presentation.css';\r\n\r\nfunction presentation(props) {\r\n   const {\r\n      labelTop,\r\n      labelMid,\r\n      labelBottom,\r\n      children\r\n   } = props;\r\n\r\n   return (\r\n      <div className=\"presentMe\">\r\n         <div className=\"commonText\">{labelTop}</div>\r\n         <div className=\"name\">{labelMid}</div>\r\n         <span className=\"bigPipe\" />\r\n         <div className=\"commonText\">{labelBottom}</div>\r\n         {children}\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default presentation;\r\n\r\n\r\n","import React from 'react';\r\nimport './codeSample.css';\r\n\r\nfunction CodeSample(props) {\r\n   const {\r\n      sample\r\n   } = props;\r\n\r\n   return (\r\n      <pre className=\"preClass\"> {sample} </pre>\r\n   );\r\n}\r\n\r\nexport default CodeSample;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Button from './components/button/button.js';\r\nimport Presentation from './components/presentation/presentation.js';\r\nimport CodeSample from './components/codeSample/codeSample.js';\r\n\r\nfunction App() {\r\n\r\n  const skills = (\r\n    `const devSkills = [\r\n    'React JS',\r\n    'Javascript',\r\n    'HTML',\r\n    'CSS',\r\n    'SQL Server',\r\n    'C#',\r\n  ];\r\n          \r\n  const agile = [\r\n    'scrum',\r\n    'kanban'\r\n  ];`\r\n  );\r\n\r\n  return (\r\n    <div className=\"mainContainter\">\r\n      <div className=\"leftPanel\">\r\n        <CodeSample sample={skills} />\r\n      </div>\r\n      <div className=\"rightPanel\">\r\n        <div className=\"profilePicture\">\r\n          <img src=\"Profile1.png\" alt=\"A picture of me\" />\r\n\r\n        </div>\r\n\r\n\r\n        <Presentation\r\n          labelTop=\"Hi I'm\"\r\n          labelMid=\"Gustavo TenÃ³rio\"\r\n          labelBottom=\"FULL STACK DEVELOPER\"\r\n        >\r\n          <Button\r\n            label=\"View CV\"\r\n            pageUrl={'https://www.linkedin.com/in/gustavotenorio/'}\r\n          />\r\n        </Presentation>\r\n\r\n        <div className=\"socialMediaContainer\">\r\n          <Button\r\n            label=\"in\"\r\n            buttonLayout=\"socialMedia\"\r\n            cssClass=\"linkedinIcon\"\r\n            pageUrl={'https://www.linkedin.com/in/gustavotenorio/'}\r\n          />\r\n          <Button\r\n            label=\"git\"\r\n            buttonLayout=\"socialMedia\"\r\n            cssClass=\"githubIcon\"\r\n            pageUrl={'https://github.com/gustavohst'}\r\n          />\r\n          <Button\r\n            label=\"DEV\"\r\n            buttonLayout=\"socialMedia\"\r\n            cssClass=\"devIcon\"\r\n            pageUrl={'https://dev.to/gustavohst'}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}