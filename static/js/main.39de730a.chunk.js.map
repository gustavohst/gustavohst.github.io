{"version":3,"sources":["components/button/button.js","components/presentation/presentation.js","components/codeSample/codeSample.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","label","pageUrl","buttonLayout","cssClass","layout","type","className","onClick","window","open","presentation","labelTop","labelMid","labelBottom","children","CodeSample","sample","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSA+BeA,MA5Bf,SAAgBC,GAAQ,IAElBC,EAICD,EAJDC,MACAC,EAGCF,EAHDE,QACAC,EAECH,EAFDG,aAJiB,EAMhBH,EADDI,gBALiB,MAKN,GALM,EAQhBC,EAAS,GAEb,OAAQF,GACL,IAAK,cACFE,EAAS,0BACT,MACH,QACGA,EAAS,gBAIf,OACG,4BACGC,KAAK,SACLC,UAAS,UAAKF,EAAL,YAAeD,GACxBI,QAAU,WAAQN,EAAUO,OAAOC,KAAKR,GAAWO,OAAOC,KAAK,iDAChET,I,MCLOU,MAnBf,SAAsBX,GAAQ,IAExBY,EAICZ,EAJDY,SACAC,EAGCb,EAHDa,SACAC,EAECd,EAFDc,YACAC,EACCf,EADDe,SAGH,OACG,yBAAKR,UAAU,aACZ,yBAAKA,UAAU,cAAcK,GAC7B,yBAAKL,UAAU,QAAQM,GACvB,0BAAMN,UAAU,YAChB,yBAAKA,UAAU,cAAcO,GAC5BC,I,MCJKC,MAVf,SAAoBhB,GAAQ,IAEtBiB,EACCjB,EADDiB,OAGH,OACG,yBAAKV,UAAU,YAAf,IAA4BU,EAA5B,MC2DSC,MA9Df,WAkBE,OACE,yBAAKX,UAAU,kBACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAYU,OAnBN,2LAqBR,yBAAKV,UAAU,cACb,8BACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEK,SAAS,SACTC,SAAS,qBACTC,YAAY,wBAEZ,kBAAC,EAAD,CACEb,MAAM,UACNC,QAAS,kDAIf,yBAAKK,UAAU,wBACb,kBAAC,EAAD,CACEN,MAAM,KACNE,aAAa,cACbC,SAAS,eACTF,QAAS,gDAEX,kBAAC,EAAD,CACED,MAAM,MACNE,aAAa,cACbC,SAAS,aACTF,QAAS,kCAEX,kBAAC,EAAD,CACED,MAAM,MACNE,aAAa,cACbC,SAAS,UACTF,QAAS,kCChDDiB,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.39de730a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './button.css';\r\n\r\nfunction Button(props) {\r\n   const {\r\n      label,\r\n      pageUrl,\r\n      buttonLayout,\r\n      cssClass = \"\",\r\n   } = props;\r\n\r\n   let layout = \"\";\r\n\r\n   switch (buttonLayout) {\r\n      case \"socialMedia\":\r\n         layout = \"socialMediaSquareButton\";\r\n         break;\r\n      default:\r\n         layout = \"primaryButton\";\r\n         break;\r\n   }\r\n\r\n   return (\r\n      <button\r\n         type=\"button\"\r\n         className={`${layout} ${cssClass}`}\r\n         onClick={ () => { pageUrl ? window.open(pageUrl) : window.open('https://www.linkedin.com/in/gustavotenorio/') }}\r\n      >{label}</button>\r\n   );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport './presentation.css';\r\n\r\nfunction presentation(props) {\r\n   const {\r\n      labelTop,\r\n      labelMid,\r\n      labelBottom,\r\n      children\r\n   } = props;\r\n\r\n   return (\r\n      <div className=\"presentMe\">\r\n         <div className=\"commonText\">{labelTop}</div>\r\n         <div className=\"name\">{labelMid}</div>\r\n         <span className=\"bigPipe\" />\r\n         <div className=\"commonText\">{labelBottom}</div>\r\n         {children}\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default presentation;\r\n\r\n\r\n","import React from 'react';\r\nimport './codeSample.css';\r\n\r\nfunction CodeSample(props) {\r\n   const {\r\n      sample\r\n   } = props;\r\n\r\n   return (\r\n      <pre className=\"preClass\"> {sample} </pre>\r\n   );\r\n}\r\n\r\nexport default CodeSample;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Button from './components/button/button.js'\nimport Presentation from './components/presentation/presentation.js'\nimport CodeSample from './components/codeSample/codeSample.js'\n\nfunction App() {\n\n  const skills = (\n    `const devSkills = [\n    'React JS',\n    'Javascript',\n    'HTML',\n    'CSS',\n    'SQL Server',\n    'C#',\n  ];\n          \n  const agile = [\n    'scrum',\n    'kanban'\n  ];`\n  );\n\n  return (\n    <div className=\"mainContainter\">\n      <div className=\"leftPanel\">\n        <CodeSample sample={skills} />\n      </div>\n      <div className=\"rightPanel\">\n        <div />\n        <div className=\"presentMe\">\n          <Presentation\n            labelTop=\"Hi I'm\"\n            labelMid=\"Gustavo TenÃ³rio\"\n            labelBottom=\"FULL STACK DEVELOPER\"\n          >\n            <Button\n              label=\"View CV\"\n              pageUrl={'https://www.linkedin.com/in/gustavotenorio/'}\n            />\n          </Presentation>\n        </div>\n        <div className=\"socialMediaContainer\">\n          <Button\n            label=\"in\"\n            buttonLayout=\"socialMedia\"\n            cssClass=\"linkedinIcon\"\n            pageUrl={'https://www.linkedin.com/in/gustavotenorio/'}\n          />\n          <Button\n            label=\"git\"\n            buttonLayout=\"socialMedia\"\n            cssClass=\"githubIcon\"\n            pageUrl={'https://github.com/gustavohst'}\n          />\n          <Button\n            label=\"DEV\"\n            buttonLayout=\"socialMedia\"\n            cssClass=\"devIcon\"\n            pageUrl={'https://dev.to/gustavohst'}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}